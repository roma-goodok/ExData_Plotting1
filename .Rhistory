library("rJava")
#naive bayes from e1071
library(kernlab)
library(e1071)
data(spam)
head(spam)
dim(spam)
s <- spam
frequencyMult <- 1;
#s[1:48] <- spam[1:54]*frequencyMult+0.1
#s[49:57] <- 1 ### to ignore additional info
set.seed(1234567)
idx <- sample(1:dim(s)[1], 500)
spamtrain <- s[-idx, ]
spamtest <- s[idx, ]
# Aprior distribution:
table(spamtrain$type)
table(spamtrain$type)/length(spamtrain$type)
### naiveBayes
nb.model <- naiveBayes(type ~ ., data = spamtrain, laplace = 1)
nb.prediction <- predict(nb.model, spamtest)
nb.conf.mx <- table(nb.prediction  ,spamtest$type)
nb.error.rate <- (sum(nb.conf.mx) - sum(diag(nb.conf.mx))) / sum(nb.conf.mx)
# ---- naiveBayes result:
nb.conf.mx
nb.error.rate
### SVM
svm.model <- ksvm(type ~ ., data = spamtrain, kernel = "rbfdot", kpar = list(sigma = 0.05), C = 5, cross = 3)
svm.model
nb.prediction <- predict(svm.model, spamtest[,-58])
svm.conf.mx <- table(nb.prediction, spamtest[, 58])
svm.error.rate <- (sum(svm.conf.mx) - sum(diag(svm.conf.mx))) / sum(svm.conf.mx)
# --- SVM result:
svm.conf.mx
svm.error.rate
library(tree)
tree.model <- tree(type ~ ., data = spamtrain)
tree.prediction <-  predict(tree.model, spamtest[,-58],type="class")
tree.conf.mx <- table(tree.prediction, spamtest[, 58])
tree.error.rate <- (sum(tree.conf.mx) - sum(diag(tree.conf.mx))) / sum(tree.conf.mx)
# --- Decision Tree result:
tree.conf.mx
tree.error.rate
library(randomForest)
rf.model <- randomForest(type ~ ., data = spamtrain)
#naive bayes from e1071
library(kernlab)
library(e1071)
version()
version
setwd("~/")
pow <- function(x = 4, n = 3) {
x^n
}
pow <- function(x = 4, n = 3) {
x^n
}
pow <- function(x = 4, n = 3) {
x^n
}
pow()
x <- 1:10
if(x > 5) {
x <- 0
}
library(datasets)
data(iris)
?iris
iris$Sepal.Length
names(iris)
iris$Species='virginica'
iris$Species=="virginica"
library(datasets)
data(iris)
iris$Species=="virginica"
iris$Sepal.Length[iris$Species=="virginica"]
mean(iris$Sepal.Length[iris$Species=="virginica"])
?tapply
tapply(iris$Sepal.Length, iris$Species, mean)
apply(iris[, 1:4], 2, mean)
apply(iris[, 1:40], 2, mean)
iris[, 1:4]
apply(iris[, 1:4], 2, mean)
mean(iris$Sepal.Length)
apply(iris[, 1:4], 1, mean)
library(datasets)
data(mtcars)
tapply(mtcars$cyl, mtcars$mpg, mean)
tapply(mtcars$mpg, mtcars$cyl,  mean)
split(mtcars$mpg, mtcars$cyl)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?mtcars
tapply(mtcars$hp, mtcars$cyl, mean)
mtcars$cyl[1,3]
tapply(mtcars$hp, mtcars$cyl, mean)
d <- tapply(mtcars$hp, mtcars$cyl, mean)
d[1]
d[2]
d[3]
d[3]-d[1]
d <- tapply(mtcars$hp, mtcars$cyl, mean)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
debug(ls)
ls()
d
4
ls(2)
exit
n
debug
ls()
n
q
n
?debug
x <- rnorm(100)
hist(x)
x <- rnorm(100)
hist(x)
x <- rnorm(100)
hist(x)
n
x <- rnorm(100)
hist(x)n
x <- rnorm(100)
hist(x)n
x <- rnorm(100)
hist(x)
dev.off()
x<-rnorm(100)
y <- x + rnorm(100)
par(las=1)
plot(x,y)
par(las=2)
plot(x,y)
par(las=1)
plot(x,y)
par(las=0)
plot(x,y)
par(las=1)
plot(x,y)
par(las=0)
plot(x,y)
par(las=0)
plot(x,y)
par(las=1)
plot(x,y)
par(las=1)
plot(x,y)
par(las=2)
plot(x,y)
par(las=2)
plot(x,y)
par(las=3)
plot(x,y)
x<-rnorm(100)
y <- x + rnorm(100)
par(las=3)
plot(x,y)
x1<-rnorm(10)
y1<-rnorm(10)
points(x1, y1, col="red")
x1<-rnorm(100)
y1<-rnorm(100)
points(x1, y1, col="blue")
x<-rnorm(1000)
y <- x + rnorm(1000)
par(las=3)
plot(x,y)
x1<-rnorm(1000)
y1<-rnorm(1000)
points(x1, y1, col="blue")
x<-rnorm(1000)
y <- x + 0.2*rnorm(1000)
par(las=3)
plot(x,y)
?gl
?jpeg
set.seed(1)
rpois(5, 2)
?boxplot
?barchart
?boxplot
?bwplot
?boxplot
?bwplot
?xyplot
?lines
?hist
?lines
library(lattice)
library(nlme)
xyplot(distance ~ age | Subject, data = Orthodont)
xyplot(distance ~ age , data = Orthodont)
xyplot(distance ~ age | Subject, data = Orthodont)
xyplot(distance ~ age , data = Orthodont)
xyplot(distance ~ age | Subject, data = Orthodont)
?Orthodont
xyplot(distance ~ age | Subject, data = Orthodont, type="b")
xyplot(distance ~ age | Subject, data = Orthodont, type="c")
xyplot(distance ~ age | Subject, data = Orthodont, type="d")
xyplot(distance ~ age | Subject, data = Orthodont, type="a")
xyplot(distance ~ age | Subject, data = Orthodont, type="0")
xyplot(distance ~ age | Subject, data = Orthodont, type="b")
clear
clear()
tr <- xyplot(distance ~ age | Subject, data = Orthodont, type="b")
print(tr)
plot(tr)
x<-rnorm(100)
y <- rnorm(100, sd=0.5)
f <- gl(2, 50, labels = c("Group 1", "Group 2"))
f
table(f)
summary(f)
?f
??f
str(f)
xyplot( y ~ x | f)
x <- rnorm(100)
hist(x,
xlab=expression("The mean (" * bar(x) * ") is " *
sum(x[i]/n,i==1,n)))
plot(0, 0, main = expression(theta == 0),
ylab = expression(hat(gamma) == 0),
xlab = expression(sum(x[i] * y[i], i==1, n)))
x <- rnorm(100)
y <- x + rnorm(100, sd = 0.5)
plot(x, y,
xlab=substitute(bar(x) == k, list(k=mean(x))),
ylab=substitute(bar(y) == k, list(k=mean(y)))
)
y <- x + rnorm(100, sd = 0.5)
plot(x, y,
xlab=substitute(bar(x) == k, list(k=mean(x))),
par(mfrow = c(2, 2))
for(i in 1:4) {
x <- rnorm(100)
hist(x, main=substitute(theta==num,list(num=i)))
}
par(mfrow = c(2, 2))
for(i in 1:4) {
x <- rnorm(100)
hist(x, main=substitute(theta==num,list(num=i)))
}
colors()
pallete()
heat.pallete()
heat.colors()
topo.colors(100)
plot(topo.colors(100))
d <- colorRamp(c("blue", "red"))
d
d[1]
d(0)
d(1)
d(2)
d(0.5)
d(0.8)
d(seq(0,1,10))
seq(0,1,10)
seq(0,1,length=10)
d(seq(0,1,length=10))
d <- colorRamp(c("red", "blue", "green"))
d(seq(0,1,length=10))
d <- colorRamp(c("red", "blue", "green", "yellow"))
d(seq(0,1,length=10))
pal <-  colorRampPalette(c("red", "yellow"))
pal(123)
pal(1)
pal(2)
pal(3)
pal(4)
pal(5)
pal(100)
pal(10)
d(10)
d(seq(0,1,length=10))
?volcano
image(volcano)
image(volcano, col=pal(10))
image(volcano, col=pal(20))
image(volcano, col=pal(200))
image(volcano, col = pal(200))
pal <-  colorRampPalette(c("red", "yellow"))
pal <-  colorRampPalette(c("red", "yellow", "blue"))
image(volcano, col = pal(20))
pal <-  colorRampPalette(c("red", "yellow", "borange", "green", "blue"))
image(volcano, col = pal(20))
pal <-  colorRampPalette(c("red", "yellow", "borange", "green", "blue"))
image(volcano, col = pal(20))
image(volcano, col = pal(30))
pal <-  colorRampPalette(c("red", "yellow", "borange", "green", "blue"))
image(volcano, col = pal(30))
pal <-  colorRampPalette(c("red", "yellow", "orange", "green", "blue"))
image(volcano, col = pal(30))
pal <-  colorRampPalette(c("red", "yellow", "orange", "green", "blue"))
image(volcano, col = pal(30))
pal <-  colorRampPalette(c("red", "yellow", "borange", "green", "blue"))
pal <-  colorRampPalette(c("red", "blue"))
image(volcano, col = pal(30))
pal <-  colorRampPalette(c("red", "yellow", "borange", "green", "blue"))
image(volcano, col = pal(30))
pal <-  colorRampPalette(c("red", "yellow", "borange", "green", "blue"))
pal <-  colorRampPalette(c("red", "yellow", "orange", "green", "blue"))
image(volcano, col = pal(30))
pal <-  colorRampPalette(c("red", "yellow", "orange", "green", "blue"))
pal <-  colorRampPalette(c("red", "yellow", "orange", "white"))
image(volcano, col = pal(30))
pal <-  colorRampPalette(c("black", "red", "yellow", "orange", "white"))
image(volcano, col = pal(30))
pal <-  colorRampPalette(c("black", "red", "yellow", "orange", "white"))
image(volcano, col = pal(30))
image(volcano, col = pal(100))
image(volcano, col = pal(1000))
dim(volcano)
head(volcano)
library(RColorBrewer)
install(RColorBrewer)
install.packages("RColorBrewer")
library(RColorBrewer)
cols <- brewer.pal(3, "BuGn")
cols
pal <-  colorRampPalette(cols )
cols
image(volcano, col = pal(1000))
cols <- brewer.pal(3, "Greys")
pal <-  colorRampPalette(cols )
image(volcano, col = pal(1000))
cols <- brewer.pal(3, "Greys")
cols
pal <-  colorRampPalette(cols )
image(volcano, col = pal(1000))
smoothScatter(x,y)
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x,y)
?smoothScatter
smoothScatter(x,y, colramp <- pal)
smoothScatter(x,y, colramp <- cols)
smoothScatter(x,y, colorRampPalette(c("white", blues9))
smoothScatter(x,y, colorRampPalette(c("white", blues9)))
x <- rnorm(10000)
y <- rnorm(10000)
smoothScatter(x,y, colorRampPalette(c("white", blues9)))
smoothScatter(x,y, colramp = colorRampPalette(c("white", blues9)))
smoothScatter(x,y, colramp = pal)
?rf
?rnorm
?rnormp(10)
rnormp(10)
rnorm(10)
pnorm(10)
pnorm(1)
pnorm(100)
pnorm(2)
pnorm(3)
pnorm(4)
pnorm(6)
pnorm()
pnorm(5)
pnorm(0)
pnorm(1)
1-pnorm(1)
1-2*pnorm(1)
1-2*pnorm(2)
1-2*pnorm(3)
1-2*pnorm(4)
1-2*pnorm(5)
1-2*pnorm(6)
y1 = 2*(1+0.01)^3+2
y2 = 2*(1-0.01)^3+2
(y2-y1)/(2*0.01)
(y1-y2)/(2*0.01)
install.packages("rJava")
library(rJava)
sys.version()
Sys.version()
Sys.Version()
sys.Version
R.Version()
R.Version$version.string
R.Version()$version.string
Sys.info()
Sys.info()$sysname
Sys.info()
Sys.info()$sysname
Sys.info()
Sys.info()$release
sn <- Sys.info()
str(sn)
sn[sysname]
sn["sysname"]
Sys.info()["sysname"]
Sys.info()["release"]
print(Sys.info()["sysname"])
R.Version()$version.string
Sys.info()["sysname"]
Sys.info()["release"]
## Note:
## This script was created on a Windows 7 x64, R version: R version 3.1.1 (2014-07-10)
## data source file stored on "Data\Coursera\exdata-004\Programm Assigment 1\data\" folder
## scripts are saved in the   "Data\Coursera\exdata-004\Programm Assigment 1\ExData_Plotting1\" folder
R.Version()$version.string
Sys.info()["sysname"]
Sys.info()["release"]
setwd("C:\\Data\\Coursera\\exdata-004\\Programm Assigment 1\\ExData_Plotting1\\")
fileName <- "..\\data\\household_power_consumption.txt"
#
#  Load data from file:
#
initial <- read.table(fileName,  header = TRUE, sep=";", nrows = 1000, na.strings <- c("?"))
classes <- sapply(initial, class)
d.draft <- read.table(fileName,  header = TRUE,   sep=";", na.strings = c("?"))
#
# filter loaded dataset and bind row with converted to datetime  "Date", "Time" factor
#
d <- d.draft[d.draft$Date == "2/2/2007" | d.draft$Date == "1/2/2007",]
d <- data.frame(d, datetime =  strptime( paste(d$Date,d$Time), "%d/%m/%Y %H:%M:%S"))
names(d)
str(d)
## check first weekday: head(format (d$datetime, "%a"))
hist(d$Global_active_power, main = "Global Active Power", xlab="Global Active Power (kilowatts)", col="red")
library(datasets)
with(faithful, plot(eruptions, waiting))  ## Create plot on screen device
title(main = "Old Faithful Geyser data")  ## Add a main title
?dev.copy
?png
png(file = "plot1.png", width = 480, height = 480)
hist(d$Global_active_power, main = "Global Active Power", xlab="Global Active Power (kilowatts)", col="red")
dev.off()
names(d)
?plot
plot(d$datetime, d$Global_active_power)
plot(d$datetime, d$Global_active_power, type = l)
plot(d$datetime, d$Global_active_power, type = "l")
plot(d$datetime, d$Global_active_power, type = "l", ylab="Global Active Power (kilowatts)")
head(format (d$datetime, "%a"))
?format
head(?format (d$datetime, "%a"))
head(format (d$datetime, "%a"))
